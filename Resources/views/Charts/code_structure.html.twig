<!DOCTYPE html>
<meta charset="utf-8">
<style>

    .link {
        fill: none;
        stroke-opacity: .5;
    }

    .link-constructor {
        stroke: blue;
    }

    .link-setter {
        stroke: red;
    }

    .link-factory {
        stroke: green;
    }

    #arrow-constructor {
        fill: blue;
        stroke-opacity: .8;
    }

    #arrow-setter {
        fill: red;
        stroke-opacity: .8;
    }

    #arrow-factory {
        fill: green;
        stroke-opacity: .8;
    }

    .label text {
        pointer-events: none;
        font: 10px sans-serif;
        color: #000;
    }
</style>
<body>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>
    var w = window,
            d = document,
            e = d.documentElement,
            g = d.getElementsByTagName('body')[0],
            width = w.innerWidth || e.clientWidth || g.clientWidth - 100,
            height = w.innerHeight || e.clientHeight || g.clientHeight - 100;


    var color = d3.scale.category20();

    var force = d3.layout.force()
            .charge(-100)
            .linkDistance(90)
            .gravity(0.05)
            .size([width, height]);

    var drag = force.drag()
            .on("dragstart", dragstart);

    var svg = d3.select("body").append("svg")
            .attr("width", width)
            .attr("height", height);

    var svg_defs = svg.append("defs");

    var link_kinds = ["factory", "setter", "constructor"];

    link_kinds.forEach(function (kind) {
        svg_defs
                .append("marker")
                .attr("id", "arrow-" + kind)
                .attr("refX", 6 + 3)/*must be smarter way to calculate shift*/
                .attr("refY", 2)
                .attr("markerWidth", 6)
                .attr("markerHeight", 4)
                .attr("orient", "auto")
                .append("path")
                .attr("d", "M 0,0 V 4 L6,2 Z"); //this is actual shape for arrow
    });


    d3.json("{{ path_to_data_json }}", function (error, graph) {
        force
                .nodes(graph.nodes)
                .links(graph.links)
                .start();

        var link = svg.selectAll(".link")
                .data(graph.links)
                .enter().append("line")
                .attr("class", function (d) {
                    return 'link link-' + d.kind;
                })
                .attr("marker-end", function (d) {
                    return 'url(#arrow-' + d.kind + ')';
                })
                .style("stroke-width", function (d) {
                    return Math.sqrt(d.value);
                });

        var circle = svg.append("g")
                .attr("class", "node")
                .selectAll("circle")
                .data(graph.nodes)
                .enter().append("circle")
                .attr("r", 5)
                .style("fill", function (d) {
                    return color(d.group);
                })
                .call(force.drag);

        var text = svg.append("g")
                .attr("class", "label")
                .selectAll("text")
                .data(graph.nodes)
                .enter().append("text")
                .attr("dx", 6)
                .attr("dy", 8)
                .text(function (d) {
                    return d.name
                });


        force.on("tick", function () {
            link.attr("x1", function (d) {
                return d.source.x;
            })
                    .attr("y1", function (d) {
                        return d.source.y;
                    })
                    .attr("x2", function (d) {
                        return d.target.x;
                    })
                    .attr("y2", function (d) {
                        return d.target.y;
                    });


            circle.attr("transform", function (d) {
                return "translate(" + d.x + "," + d.y + ")";
            });
            text.attr("transform", function (d) {
                return "translate(" + d.x + "," + d.y + ")";
            });

        });
    });

    function dragstart(d) {
        d.fixed = true;
        d3.select(this).classed("fixed", true);
    }

</script>